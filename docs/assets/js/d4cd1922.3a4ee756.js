"use strict";(self.webpackChunkdev_portal=self.webpackChunkdev_portal||[]).push([[1370],{7859:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(2263),r=a(2792),l=a(1736),i=a(6010),o=a(7294);const d="codeBlock_FKPJ";function s(e){var t=e.children,a=e.language,s=e.title,p=(0,o.useState)((0,r.W5)()),m=p[0],c=p[1];(0,o.useEffect)((0,r.kw)((0,n.Z)(),c),[]);var u=(0,r.hd)(m),h=(0,r.jM)(m),k=(0,r.dz)(m),N=(0,r.xe)(m);function f(e){return(e||"").replace(new RegExp("#USER_API_KEY","g"),u).replace(new RegExp("#BASE_URL","g"),N).replace(new RegExp("#RECORD_ID","g"),h).replace(new RegExp("#RECORD_TITLE","g"),k)}var v=("string"==typeof t?[t]:Array.isArray(t)?t:[]).map((function(e){return"string"==typeof e?f(e):e})),y=f(s);return o.createElement("div",{className:(0,i.Z)(d)},o.createElement(l.Z,{title:y,language:a},v))}},4757:(e,t,a)=>{a.d(t,{Z:()=>r});var n=a(7294);function r(e){var t,a=e.method,r=e.url;switch(a){case"GET":t="#007959";break;case"POST":t="#0071BB";break;case"PUT":t="#DEA700";break;case"DELETE":t="#DF245E"}return n.createElement("div",{style:{display:"flex",flexDirection:"row",fontSize:"15px",lineHeight:"15px",marginBottom:"13px"}},n.createElement("span",{style:{backgroundColor:t,color:"var(--tape-color-lightest)",borderRadius:"999px",padding:"4px 9px 3px 9px",fontWeight:700,fontSize:"11px",lineHeight:"11px"}},a.toUpperCase()),n.createElement("span",{style:{color:"var(--tape-color-darker)",marginLeft:"9px",marginTop:"2px"}},r))}},8215:(e,t,a)=>{a.d(t,{Z:()=>r});var n=a(7294);function r(e){var t=e.children,a=e.hidden,r=e.className;return n.createElement("div",{role:"tabpanel",hidden:a,className:r},t)}},9877:(e,t,a)=>{a.d(t,{Z:()=>p});var n=a(7462),r=a(7294),l=a(2389),i=a(3725),o=a(6010);const d="tabItem_LplD";function s(e){var t,a,l,s=e.lazy,p=e.block,m=e.defaultValue,c=e.values,u=e.groupId,h=e.className,k=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),N=null!=c?c:k.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),f=(0,i.lx)(N,(function(e,t){return e.value===t.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===m?m:null!=(t=null!=m?m:null==(a=k.find((function(e){return e.props.default})))?void 0:a.props.value)?t:null==(l=k[0])?void 0:l.props.value;if(null!==v&&!N.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+N.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,i.UB)(),g=y.tabGroupChoices,b=y.setTabGroupChoices,_=(0,r.useState)(v),C=_[0],w=_[1],M=[],T=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=u){var x=g[u];null!=x&&x!==C&&N.some((function(e){return e.value===x}))&&w(x)}var j=function(e){var t=e.currentTarget,a=M.indexOf(t),n=N[a].value;n!==C&&(T(t),w(n),null!=u&&b(u,n))},E=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n=M.indexOf(e.currentTarget)+1;a=M[n]||M[0];break;case"ArrowLeft":var r=M.indexOf(e.currentTarget)-1;a=M[r]||M[M.length-1]}null==(t=a)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":p},h)},N.map((function(e){var t=e.value,a=e.label,l=e.attributes;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:function(e){return M.push(e)},onKeyDown:E,onFocus:j,onClick:j},l,{className:(0,o.Z)("tabs__item",d,null==l?void 0:l.className,{"tabs__item--active":C===t})}),null!=a?a:t)}))),s?(0,r.cloneElement)(k.filter((function(e){return e.props.value===C}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},k.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==C})}))))}function p(e){var t=(0,l.Z)();return r.createElement(s,(0,n.Z)({key:String(t)},e))}},8638:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>k,frontMatter:()=>s,metadata:()=>m,toc:()=>u});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=(a(4757),a(9877)),o=a(8215),d=(a(7859),["components"]),s={id:"filter",title:"Filter",sidebar_label:"Filter"},p=void 0,m={unversionedId:"api/resource/filter",id:"api/resource/filter",title:"Filter",description:"Filter inputs are used to retrieve Records with one or more filter criterions from an App. They can be provided when retrieving Records with one of the following endpoints:",source:"@site/docs/api/resource/filter.md",sourceDirName:"api/resource",slug:"/api/resource/filter",permalink:"/docs/api/resource/filter",editUrl:"https://github.com/tape-dev/developers.tapeapp.com/edit/main/apps/dev-portal/docs/api/resource/filter.md",tags:[],version:"current",frontMatter:{id:"filter",title:"Filter",sidebar_label:"Filter"},sidebar:"mainSidebar",previous:{title:"Email",permalink:"/docs/api/resource/email"},next:{title:"Introduction",permalink:"/docs/automations/introduction"}},c={},u=[{value:"Single Text",id:"single-text",level:2},{value:"Multi Text",id:"multi-text",level:2},{value:"Single Category",id:"single-category",level:2},{value:"Multi Category",id:"multi-category",level:2},{value:"Status",id:"status",level:2},{value:"Number",id:"number",level:2},{value:"Single Date",id:"single-date",level:2},{value:"Created At",id:"created-at",level:2},{value:"Last Modified At",id:"last-modified-at",level:2},{value:"Multi Email",id:"multi-email",level:2},{value:"Multi Phone",id:"multi-phone",level:2}],h={toc:u};function k(e){var t=e.components,a=(0,r.Z)(e,d);return(0,l.kt)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Filter inputs are used to retrieve Records with one or more filter criterions from an App. They can be provided when retrieving Records with one of the following endpoints:"),(0,l.kt)("p",null,"Retrieve filtered Records for an App: ",(0,l.kt)("a",{parentName:"p",href:"record#retrieve-filtered-records-for-an-app"},"Get filtered Records")),(0,l.kt)("p",null,"For every supported endpoint, multiple filters can be provided which get concatenated with the boolean ",(0,l.kt)("inlineCode",{parentName:"p"},"AND")," operator."),(0,l.kt)("p",null,"The following example matches all records that have a field value for field with ID 1 containing the text ",(0,l.kt)("inlineCode",{parentName:"p"},'"John"')," and a field value for field with ID 2 equal to ",(0,l.kt)("inlineCode",{parentName:"p"},"123"),":"),(0,l.kt)(i.Z,{defaultValue:"json",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"json",label:"JSON",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="\u27a1\ufe0f \xa0\xa0   Single Text Filter">',title:'"\u27a1\ufe0f',"\xa0\xa0":!0,"":!0,Single:!0,Text:!0,'Filter">':!0},'{\n  "filters": [\n    {\n      "field_id": "1",\n      "field_type": "single_text",\n      "match_type": "contains",\n      "values": [\n        {\n          "value": "John"\n        }\n      ],\n      "type": "text"\n    },\n    {\n      "field_id": "2",\n      "field_type": "status",\n      "match_type": "equal",\n      "values": [\n        {\n          "value": 123\n        }\n      ],\n      "type": "number"\n    }\n  ]\n}\n')))),(0,l.kt)("h2",{id:"single-text"},"Single Text"),(0,l.kt)("p",null,"This is an example on how to filter records by a ",(0,l.kt)("inlineCode",{parentName:"p"},"single_text")," field:"),(0,l.kt)(i.Z,{defaultValue:"json",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"json",label:"JSON",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="\u27a1\ufe0f \xa0\xa0   Single Text Filter">',title:'"\u27a1\ufe0f',"\xa0\xa0":!0,"":!0,Single:!0,Text:!0,'Filter">':!0},'{\n  "filters": [\n    {\n      "field_id": "1",\n      "field_type": "single_text",\n      "match_type": "contains",\n      "values": [\n        {\n          "value": "John"\n        }\n      ],\n      "type": "text"\n    }\n  ]\n}\n')))),(0,l.kt)("p",null,"The following ",(0,l.kt)("inlineCode",{parentName:"p"},"match_type")," values are supported for ",(0,l.kt)("inlineCode",{parentName:"p"},"single_text")," fields:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Match type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"equal")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is equal to the provided match value. Comparison is case insensitive and spaces are ignored. ",(0,l.kt)("inlineCode",{parentName:"td"},'" John Doe "')," is equal to ",(0,l.kt)("inlineCode",{parentName:"td"},'"john doe"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"not_equal")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is not equal to the provided match value. Comparison is case insensitive and spaces are ignored. ",(0,l.kt)("inlineCode",{parentName:"td"},'" John Doe "')," is equal to ",(0,l.kt)("inlineCode",{parentName:"td"},'"john doe"'),", ",(0,l.kt)("inlineCode",{parentName:"td"},'"johnny doe"')," is not equal to ",(0,l.kt)("inlineCode",{parentName:"td"},'"john doe"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"contains")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value contains the provided match value. Comparison is case insensitive and spaces are ignored. ",(0,l.kt)("inlineCode",{parentName:"td"},'" John Doe "')," contains ",(0,l.kt)("inlineCode",{parentName:"td"},'"doe"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"not_contains")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value does not contain the provided match value. Comparison is case insensitive and spaces are ignored. ",(0,l.kt)("inlineCode",{parentName:"td"},'" John Doe "')," does not contain ",(0,l.kt)("inlineCode",{parentName:"td"},'"Johnny"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"empty")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is empty")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"not_empty")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is not empty")))),(0,l.kt)("h2",{id:"multi-text"},"Multi Text"),(0,l.kt)("p",null,"This is an example on how to filter records by a ",(0,l.kt)("inlineCode",{parentName:"p"},"multi_text")," field:"),(0,l.kt)(i.Z,{defaultValue:"json",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"json",label:"JSON",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="\u27a1\ufe0f \xa0\xa0   Multi Text Filter">',title:'"\u27a1\ufe0f',"\xa0\xa0":!0,"":!0,Multi:!0,Text:!0,'Filter">':!0},'{\n  "filters": [\n    {\n      "field_id": "1",\n      "field_type": "multi_text",\n      "match_type": "contains",\n      "values": [\n        {\n          "value": "John"\n        }\n      ],\n      "type": "text"\n    }\n  ]\n}\n')))),(0,l.kt)("p",null,"The following ",(0,l.kt)("inlineCode",{parentName:"p"},"match_type")," values are supported for ",(0,l.kt)("inlineCode",{parentName:"p"},"multi_text")," fields:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Match type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"equal")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose unformatted field value is equal to the provided match value. Comparison is case insensitive and spaces are ignored. ",(0,l.kt)("inlineCode",{parentName:"td"},'" John Doe "')," is equal to ",(0,l.kt)("inlineCode",{parentName:"td"},'"john doe"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"not_equal")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose unformatted field value is not equal to the provided match value. Comparison is case insensitive and spaces are ignored. ",(0,l.kt)("inlineCode",{parentName:"td"},'" John Doe "')," is equal to ",(0,l.kt)("inlineCode",{parentName:"td"},'"john doe"'),", ",(0,l.kt)("inlineCode",{parentName:"td"},'"johnny doe"')," is not equal to ",(0,l.kt)("inlineCode",{parentName:"td"},'"john doe"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"contains")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose unformatted field value contains the provided match value. Comparison is case insensitive and spaces are ignored. ",(0,l.kt)("inlineCode",{parentName:"td"},'" John Doe "')," contains ",(0,l.kt)("inlineCode",{parentName:"td"},'"doe"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"not_contains")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose unformatted field value does not contain the provided match value. Comparison is case insensitive and spaces are ignored. ",(0,l.kt)("inlineCode",{parentName:"td"},'" John Doe "')," does not contain ",(0,l.kt)("inlineCode",{parentName:"td"},'"Johnny"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"empty")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is empty")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"not_empty")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is not empty")))),(0,l.kt)("h2",{id:"single-category"},"Single Category"),(0,l.kt)("p",null,"This is an example on how to filter records by a ",(0,l.kt)("inlineCode",{parentName:"p"},"single_category")," field:"),(0,l.kt)(i.Z,{defaultValue:"json",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"json",label:"JSON",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="\u27a1\ufe0f \xa0\xa0   Single Category Filter">',title:'"\u27a1\ufe0f',"\xa0\xa0":!0,"":!0,Single:!0,Category:!0,'Filter">':!0},'{\n  "filters": [\n    {\n      "field_id": "1",\n      "field_type": "single_category",\n      "match_type": "any",\n      "values": [\n        {\n          "value": 1\n        },\n        {\n          "value": "Not Started"\n        }\n      ],\n      "type": "category"\n    }\n  ]\n}\n')))),(0,l.kt)("p",null,"Either the id of the respective category option or the label of the option can be provided as match value.\nThe following ",(0,l.kt)("inlineCode",{parentName:"p"},"match_type")," values are supported for ",(0,l.kt)("inlineCode",{parentName:"p"},"single_category")," fields:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Match type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"equal")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value references the category option specified by the match value. Comparison is case insensitive and spaces are ignored.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"not_equal")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value does not reference the category option specified by the match value. Comparison is case insensitive and spaces are ignored.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"any")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value references any of the category options specified by the match value. Comparison is case insensitive and spaces are ignored.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"none")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value does not reference any of the category options specified by the match value. Comparison is case insensitive and spaces are ignored.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"empty")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is empty")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"not_empty")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is not empty")))),(0,l.kt)("h2",{id:"multi-category"},"Multi Category"),(0,l.kt)("p",null,"This is an example on how to filter records by a ",(0,l.kt)("inlineCode",{parentName:"p"},"multi_category")," field:"),(0,l.kt)(i.Z,{defaultValue:"json",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"json",label:"JSON",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="\u27a1\ufe0f \xa0\xa0   Multi Category Filter">',title:'"\u27a1\ufe0f',"\xa0\xa0":!0,"":!0,Multi:!0,Category:!0,'Filter">':!0},'{\n  "filters": [\n    {\n      "field_id": "1",\n      "field_type": "multi_category",\n      "match_type": "any",\n      "values": [\n        {\n          "value": 1\n        },\n        {\n          "value": "Not Started"\n        }\n      ],\n      "type": "category"\n    }\n  ]\n}\n')))),(0,l.kt)("p",null,"Either the id of the respective category option or the label of the option can be provided as match value.\nThe following ",(0,l.kt)("inlineCode",{parentName:"p"},"match_type")," values are supported for ",(0,l.kt)("inlineCode",{parentName:"p"},"multi_category")," fields:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Match type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"equal")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value exactly references all category options specified by the match value and no more. Comparison is case insensitive, spaces are ignored and the order of options has no influence")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"not_equal")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value exactly references all category options specified by the match value and no more. Comparison is case insensitive, spaces are ignored and the order of options has no influence")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"any")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value references any category option of those provided by the match value. Comparison is case insensitive and spaces are ignored")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"none")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value references no category option of those provided by the match value. Comparison is case insensitive and spaces are ignored")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"empty")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is empty")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"not_empty")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is not empty")))),(0,l.kt)("h2",{id:"status"},"Status"),(0,l.kt)("p",null,"This is an example on how to filter records by a ",(0,l.kt)("inlineCode",{parentName:"p"},"status")," field:"),(0,l.kt)(i.Z,{defaultValue:"json",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"json",label:"JSON",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="\u27a1\ufe0f \xa0\xa0   Status Filter">',title:'"\u27a1\ufe0f',"\xa0\xa0":!0,"":!0,Status:!0,'Filter">':!0},'{\n  "filters": [\n    {\n      "field_id": "1",\n      "field_type": "status",\n      "match_type": "any",\n      "values": [\n        {\n          "value": 1\n        },\n        {\n          "value": "Not Started"\n        }\n      ],\n      "type": "category"\n    }\n  ]\n}\n')))),(0,l.kt)("p",null,"Either the id of the respective status option or the label of the option can be provided as match value.\nThe following ",(0,l.kt)("inlineCode",{parentName:"p"},"match_type")," values are supported for ",(0,l.kt)("inlineCode",{parentName:"p"},"status")," fields:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Match type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"equal")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value references the status option specified by the match value. Comparison is case insensitive and spaces are ignored.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"not_equal")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value does not reference the status specified by the match value. Comparison is case insensitive and spaces are ignored.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"any")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value references any of the category options specified by the match value. Comparison is case insensitive and spaces are ignored.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"none")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value does not reference any of the category options specified by the match value. Comparison is case insensitive and spaces are ignored.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"empty")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is empty")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"not_empty")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is not empty")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"completed")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose referenced option is set to ",(0,l.kt)("inlineCode",{parentName:"td"},"completed"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"incomplete")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose referenced option is set to ",(0,l.kt)("inlineCode",{parentName:"td"},"incomplete"))))),(0,l.kt)("h2",{id:"number"},"Number"),(0,l.kt)("p",null,"This is an example on how to filter records by a ",(0,l.kt)("inlineCode",{parentName:"p"},"number")," field:"),(0,l.kt)(i.Z,{defaultValue:"json",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"json",label:"JSON",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="\u27a1\ufe0f \xa0\xa0   Number Filter">',title:'"\u27a1\ufe0f',"\xa0\xa0":!0,"":!0,Number:!0,'Filter">':!0},'{\n  "filters": [\n    {\n      "field_id": "1",\n      "field_type": "number",\n      "match_type": "smaller",\n      "values": [\n        {\n          "value": 12.34\n        }\n      ],\n      "type": "number"\n    }\n  ]\n}\n')))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Match type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"equal")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is equal to the provided match value")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"smaller")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is smaller than the provided match value")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"smaller_or_equal")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is smaller or equal to the provided match value")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"larger")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is larger than the provided match value")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"larger_or_equal")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is larger or equal to the provided match value")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"not_equal")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value does not reference the status specified by the match value. Comparison is case insensitive and spaces are ignored.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"empty")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is empty")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"not_empty")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is not empty")))),(0,l.kt)("h2",{id:"single-date"},"Single Date"),(0,l.kt)("p",null,"This is an example on how to filter records by a ",(0,l.kt)("inlineCode",{parentName:"p"},"single_date")," field:"),(0,l.kt)(i.Z,{defaultValue:"json",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"json",label:"JSON",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="\u27a1\ufe0f \xa0\xa0   Single Date Filter">',title:'"\u27a1\ufe0f',"\xa0\xa0":!0,"":!0,Single:!0,Date:!0,'Filter">':!0},'{\n  "filters": [\n    {\n      "field_id": "1",\n      "field_type": "single_date",\n      "match_type": "is_before",\n      "relative_date_type": "exact_date",\n      "values": [\n        {\n          "value": "2020-01-01"\n        }\n      ],\n      "type": "date"\n    },\n    {\n      "field_id": "1",\n      "field_type": "single_date",\n      "match_type": "is_after",\n      "relative_date_type": "num_weeks_before",\n      "values": [\n        {\n          "value": "2020-01-01",\n          "offset_amount": 1\n        }\n      ],\n      "type": "date"\n    }\n  ]\n}\n')))),(0,l.kt)("p",null,"In addition to the match type, a relative date type needs to be provided when filtering for a Single Date Field:\n",(0,l.kt)("inlineCode",{parentName:"p"},"num_days_after"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"num_days_before"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"num_weeks_after"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"num_months_before"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"num_months_after"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"exact_date"),"."),(0,l.kt)("p",null,"The combination of the provided match value, the offset amount and the relative date type will be used to calculate the date to match against.\nE.g. if the match value is ",(0,l.kt)("inlineCode",{parentName:"p"},"2020-01-01"),", the offset amount is ",(0,l.kt)("inlineCode",{parentName:"p"},"1")," and the relative date type is ",(0,l.kt)("inlineCode",{parentName:"p"},"num_days_before"),", the date to match against will be ",(0,l.kt)("inlineCode",{parentName:"p"},"2019-12-31"),"."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Match type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"equal")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is equal to the the date of the provided match value + offset_amount + relative_date_type")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"not_equal")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is not equal to the the date of the provided match value + offset_amount + relative_date_type")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"before")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is before the date of the provided match value + offset_amount + relative_date_type")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"on_or_before")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is before the date of the provided match value + offset_amount + relative_date_type")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"after")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is after the date of the provided match value + offset_amount + relative_date_type")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"on_or_after")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is after the date of the provided match value + offset_amount + relative_date_type")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"empty")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is empty")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"not_empty")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is not empty")))),(0,l.kt)("h2",{id:"created-at"},"Created At"),(0,l.kt)("p",null,"This is an example on how to filter records by a ",(0,l.kt)("inlineCode",{parentName:"p"},"created_at")," field:"),(0,l.kt)(i.Z,{defaultValue:"json",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"json",label:"JSON",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="\u27a1\ufe0f \xa0\xa0   Created At Filter">',title:'"\u27a1\ufe0f',"\xa0\xa0":!0,"":!0,Created:!0,At:!0,'Filter">':!0},'{\n  "filters": [\n    {\n      "field_id": "1",\n      "field_type": "created_at",\n      "match_type": "is_before",\n      "relative_date_type": "exact_date",\n      "values": [\n        {\n          "value": "2020-01-01"\n        }\n      ],\n      "type": "date"\n    },\n    {\n      "field_id": "1",\n      "field_type": "created_at",\n      "match_type": "is_after",\n      "relative_date_type": "num_weeks_before",\n      "values": [\n        {\n          "value": "2020-01-01",\n          "offset_amount": 1\n        }\n      ],\n      "type": "date"\n    }\n  ]\n}\n')))),(0,l.kt)("p",null,"In addition to the match type, a relative date type needs to be provided when filtering for a Created At Field:\n",(0,l.kt)("inlineCode",{parentName:"p"},"num_days_after"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"num_days_before"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"num_weeks_after"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"num_months_before"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"num_months_after"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"exact_date"),"."),(0,l.kt)("p",null,"The combination of the provided match value, the offset amount and the relative date type will be used to calculate the date to match against.\nE.g. if the match value is ",(0,l.kt)("inlineCode",{parentName:"p"},"2020-01-01"),", the offset amount is ",(0,l.kt)("inlineCode",{parentName:"p"},"1")," and the relative date type is ",(0,l.kt)("inlineCode",{parentName:"p"},"num_days_before"),", the date to match against will be ",(0,l.kt)("inlineCode",{parentName:"p"},"2019-12-31"),"."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Match type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"equal")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose creation date is equal to the the date of the provided match value + offset_amount + relative_date_type")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"not_equal")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose creation date is not equal to the the date of the provided match value + offset_amount + relative_date_type")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"before")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose creation date is before the date of the provided match value + offset_amount + relative_date_type")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"on_or_before")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose creation date is before the date of the provided match value + offset_amount + relative_date_type")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"after")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose creation date is after the date of the provided match value + offset_amount + relative_date_type")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"on_or_after")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose creation date is after the date of the provided match value + offset_amount + relative_date_type")))),(0,l.kt)("h2",{id:"last-modified-at"},"Last Modified At"),(0,l.kt)("p",null,"This is an example on how to filter records by a ",(0,l.kt)("inlineCode",{parentName:"p"},"last_modified_at")," field:"),(0,l.kt)(i.Z,{defaultValue:"json",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"json",label:"JSON",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="\u27a1\ufe0f \xa0\xa0   Last Modified At Filter">',title:'"\u27a1\ufe0f',"\xa0\xa0":!0,"":!0,Last:!0,Modified:!0,At:!0,'Filter">':!0},'{\n  "filters": [\n    {\n      "field_id": "1",\n      "field_type": "last_modified_at",\n      "match_type": "is_before",\n      "relative_date_type": "exact_date",\n      "values": [\n        {\n          "value": "2020-01-01"\n        }\n      ],\n      "type": "date"\n    },\n    {\n      "field_id": "1",\n      "field_type": "last_modified_at",\n      "match_type": "is_after",\n      "relative_date_type": "num_weeks_before",\n      "values": [\n        {\n          "value": "2020-01-01",\n          "offset_amount": 1\n        }\n      ],\n      "type": "date"\n    }\n  ]\n}\n')))),(0,l.kt)("p",null,"In addition to the match type, a relative date type needs to be provided when filtering for a Last Modified At Field:\n",(0,l.kt)("inlineCode",{parentName:"p"},"num_days_after"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"num_days_before"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"num_weeks_after"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"num_months_before"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"num_months_after"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"exact_date"),"."),(0,l.kt)("p",null,"The combination of the provided match value, the offset amount and the relative date type will be used to calculate the date to match against.\nE.g. if the match value is ",(0,l.kt)("inlineCode",{parentName:"p"},"2020-01-01"),", the offset amount is ",(0,l.kt)("inlineCode",{parentName:"p"},"1")," and the relative date type is ",(0,l.kt)("inlineCode",{parentName:"p"},"num_days_before"),", the date to match against will be ",(0,l.kt)("inlineCode",{parentName:"p"},"2019-12-31"),"."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Match type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"equal")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose date of last modification is equal to the the date of the provided match value + offset_amount + relative_date_type")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"not_equal")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose date of last modification is not equal to the the date of the provided match value + offset_amount + relative_date_type")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"before")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose date of last modification is before the date of the provided match value + offset_amount + relative_date_type")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"on_or_before")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose date of last modification is before the date of the provided match value + offset_amount + relative_date_type")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"after")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose date of last modification is after the date of the provided match value + offset_amount + relative_date_type")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"on_or_after")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose date of last modification is after the date of the provided match value + offset_amount + relative_date_type")))),(0,l.kt)("h2",{id:"multi-email"},"Multi Email"),(0,l.kt)("p",null,"This is an example on how to filter records by a ",(0,l.kt)("inlineCode",{parentName:"p"},"multi_email")," field:"),(0,l.kt)(i.Z,{defaultValue:"json",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"json",label:"JSON",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="\u27a1\ufe0f \xa0\xa0   Multi Email Filter">',title:'"\u27a1\ufe0f',"\xa0\xa0":!0,"":!0,Multi:!0,Email:!0,'Filter">':!0},'{\n  "filters": [\n    {\n      "field_id": "1",\n      "field_type": "multi_email",\n      "match_type": "fully_includes",\n      "values": [\n        {\n          "value": "john.doe@gmail.com"\n        }\n      ],\n      "type": "email"\n    }\n  ]\n}\n')))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Match type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"fully_includes")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value includes at least one email entry containing the full number specified by the match value. Comparison is case insensitive and spaces are ignored.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"starts_with")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value includes at least one email entry that starts with the match value. Comparison is case insensitive and spaces are ignored.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"ends_with")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value includes at least one email entry that ends with the match value. Comparison is case insensitive and spaces are ignored.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"contains")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value includes at least one email entry that contains the match value. Comparison is case insensitive and spaces are ignored.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"not_contains")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value includes at least one email entry that does not contain the match value. Comparison is case insensitive and spaces are ignored.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"empty")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is empty. I.e. does not contain any email entry")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"not_empty")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is not empty. I.e. contains at least one email entry")))),(0,l.kt)("h2",{id:"multi-phone"},"Multi Phone"),(0,l.kt)("p",null,"This is an example on how to filter records by a ",(0,l.kt)("inlineCode",{parentName:"p"},"multi_phone")," field:"),(0,l.kt)(i.Z,{defaultValue:"json",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"json",label:"JSON",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="\u27a1\ufe0f \xa0\xa0   Multi Phone Filter">',title:'"\u27a1\ufe0f',"\xa0\xa0":!0,"":!0,Multi:!0,Phone:!0,'Filter">':!0},'{\n  "filters": [\n    {\n      "field_id": "1",\n      "field_type": "multi_phone",\n      "match_type": "starts_with",\n      "values": [\n        {\n          "value": "+49"\n        }\n      ],\n      "type": "phone"\n    }\n  ]\n}\n')))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Match type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"fully_includes")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value includes at least one phone entry containing the full address specified by the match value. Comparison is case insensitive and spaces are ignored.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"starts_with")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value includes at least one phone entry that starts with the match value. Comparison is case insensitive and spaces are ignored.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"ends_with")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value includes at least one phone entry that ends with the match value. Comparison is case insensitive and spaces are ignored.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"contains")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value includes at least one phone entry that contains the match value. Comparison is case insensitive and spaces are ignored.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"not_contains")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value includes at least one phone entry that does not contain the match value. Comparison is case insensitive and spaces are ignored.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"empty")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is empty. I.e. does not contain any phone entry")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"not_empty")),(0,l.kt)("td",{parentName:"tr",align:null},"Matches all records whose field value is not empty. I.e. contains at least one phone entry")))))}k.isMDXComponent=!0}}]);