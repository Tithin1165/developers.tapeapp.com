"use strict";(self.webpackChunkdev_portal=self.webpackChunkdev_portal||[]).push([[7402],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),d=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=d(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=d(n),f=a,m=u["".concat(p,".").concat(f)]||u[f]||c[f]||i;return n?r.createElement(m,l(l({ref:t},s),{},{components:n})):r.createElement(m,l({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var d=2;d<i;d++)l[d]=n[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4757:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(7294);function a(e){var t,n=e.method,a=e.url;switch(n){case"GET":t="#007959";break;case"POST":t="#0071BB";break;case"PUT":t="#DEA700";break;case"DELETE":t="#DF245E"}return r.createElement("div",{style:{display:"flex",flexDirection:"row",fontSize:"15px",lineHeight:"15px",marginBottom:"13px"}},r.createElement("span",{style:{backgroundColor:t,color:"var(--tape-color-lightest)",borderRadius:"999px",padding:"4px 9px 3px 9px",fontWeight:700,fontSize:"11px",lineHeight:"11px"}},n.toUpperCase()),r.createElement("span",{style:{color:"var(--tape-color-darker)",marginLeft:"9px",marginTop:"2px"}},a))}},3153:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>p,metadata:()=>s,toc:()=>u});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=n(4757),o=["components"],p={id:"text",title:"Text Field Value",sidebar_label:"Text"},d=void 0,s={unversionedId:"api/resource/field-value/text",id:"api/resource/field-value/text",title:"Text Field Value",description:"A text field value consists of its value property of type string. The value is plaintext if the type of its corresponding field is SINGLETEXT and rich-text (HTML) if the field's type is MULTITEXT.",source:"@site/docs/api/resource/field-value/text.md",sourceDirName:"api/resource/field-value",slug:"/api/resource/field-value/text",permalink:"/docs/api/resource/field-value/text",editUrl:"https://github.com/tape-dev/developers.tapeapp.com/edit/main/apps/dev-portal/docs/api/resource/field-value/text.md",tags:[],version:"current",frontMatter:{id:"text",title:"Text Field Value",sidebar_label:"Text"},sidebar:"mainSidebar",previous:{title:"General",permalink:"/docs/api/resource/field-value/general"},next:{title:"App",permalink:"/docs/api/resource/app"}},c={},u=[{value:"Record creation",id:"record-creation",level:2},{value:"Record update",id:"record-update",level:2}],f={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A text field value consists of its ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," property of type ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),". The value is plaintext if the type of its corresponding field is ",(0,i.kt)("inlineCode",{parentName:"p"},"SINGLE_TEXT")," and rich-text (HTML) if the field's type is ",(0,i.kt)("inlineCode",{parentName:"p"},"MULTI_TEXT"),"."),(0,i.kt)("h2",{id:"record-creation"},"Record creation"),(0,i.kt)(l.Z,{method:"POST",url:"https://api.tapeapp.com/v1/record/app/{app_id}",mdxType:"EndpointBadge"}),(0,i.kt)("p",null,'A text field value can be created as part of a record creation. Here is an example request body for creating a record with the text field value "Adam Smith" for the "First Name" field with ID 1, type ',(0,i.kt)("inlineCode",{parentName:"p"},"SINGLE_TEXT")," and external ID ",(0,i.kt)("inlineCode",{parentName:"p"},"first_name"),' and a value for the "Notes" field with ID 2, type ',(0,i.kt)("inlineCode",{parentName:"p"},"MULTI_TEXT")," and external ID ",(0,i.kt)("inlineCode",{parentName:"p"},"notes"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="\u27a1\ufe0f \xa0\xa0   Request"',title:'"\u27a1\ufe0f',"\xa0\xa0":!0,"":!0,'Request"':!0},'{\n  "fields": {\n    "first_name": {\n      "value": "Adam Smith"\n    },\n    "notes": {\n      "value": "<p>Registered <b>10</b> month ago.</p>"\n    }\n  }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="\u2b05\ufe0f \xa0\xa0   Response"',title:'"\u2b05\ufe0f',"\xa0\xa0":!0,"":!0,'Response"':!0},'{\n  "id": 1,\n  "title": "Adam Smith",\n  "fields": [\n    {\n      "field_Id": 1,\n      "external_id": "first_name",\n      "type": "text",\n      "field_type": "SINGLE_TEXT",\n      "label": "First Name",\n      "values": [{ "value": "Adam Smith" }]\n    },\n    {\n      "field_Id": 2,\n      "external_id": "notes",\n      "type": "text",\n      "field_type": "MULTI_TEXT",\n      "label": "Notes",\n      "values": [{ "value": "<p>Registered <b>10</b> month ago.</p>" }]\n    }\n  ]\n}\n')),(0,i.kt)("h2",{id:"record-update"},"Record update"),(0,i.kt)(l.Z,{method:"PUT",url:"https://api.tapeapp.com/v1/record/{record_id}",mdxType:"EndpointBadge"}),(0,i.kt)("p",null,'One or more text field values can be updated as part of a record update. Here is an example request body for updating a record with the text field value "Andrea Lim" for the "First Name" field with ID 1, type ',(0,i.kt)("inlineCode",{parentName:"p"},"SINGLE_TEXT")," and external ID ",(0,i.kt)("inlineCode",{parentName:"p"},"first_name"),' and a value for the "Notes" field with ID 2, type ',(0,i.kt)("inlineCode",{parentName:"p"},"MULTI_TEXT")," and external ID ",(0,i.kt)("inlineCode",{parentName:"p"},"notes"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="\u27a1\ufe0f \xa0\xa0   Request"',title:'"\u27a1\ufe0f',"\xa0\xa0":!0,"":!0,'Request"':!0},'{\n  "fields": {\n    "first_name": {\n      "value": "Andrea Lim"\n    },\n    "notes": {\n      "value": "<p>Has <b>not</b> registered yet.</p>"\n    }\n  }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="\u2b05\ufe0f \xa0\xa0   Response"',title:'"\u2b05\ufe0f',"\xa0\xa0":!0,"":!0,'Response"':!0},'{\n  "id": 1,\n  "title": "Andrea Lim",\n  "fields": [\n    {\n      "field_Id": 1,\n      "external_id": "first_name",\n      "type": "text",\n      "field_type": "SINGLE_TEXT",\n      "label": "First Name",\n      "values": [{ "value": "Andrea Lim" }]\n    },\n    {\n      "field_Id": 2,\n      "external_id": "notes",\n      "type": "text",\n      "field_type": "MULTI_TEXT",\n      "label": "Notes",\n      "values": [{ "value": "<p>Has <b>not</b> registered yet.</p>" }]\n    }\n  ]\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"")))}m.isMDXComponent=!0}}]);